import type { Action } from "./actions";
import { MoveAction, SaveAction, ShootAction, SwitchWeaponAction } from "./actions";
import type { GameState, MapState } from "./types";
import Weapons from "./weapons";

/**
 * (fr) Cette classe repr√©sente votre bot. Vous pouvez y d√©finir des attributs et des m√©thodes qui
 *      seront conserv√©es entre chaque appel de la m√©thode `on_tick`.
 */
class MyBot {
    private name = "Isabella";
    private state: null | MapState = null;

    constructor() {
        this.name = "Isabella";
    }

    /**
     * (fr) Cette m√©thode est appel√©e √† chaque tick de jeu. Vous pouvez y d√©finir
     *      le comportement de voter bot. Elle doit retourner une liste d'actions
     *      qui sera ex√©cut√©e par le serveur.
     *
     *      Liste des actions possibles:
     *      - MoveAction({x, y})        Permet de diriger son bot, il ira a vitesse
     *                                  constante jusqu'√† ce point.
     *
     *      - ShootAction({x, y})       Si vous avez le canon comme arme, cela va tirer
     *                                  √† la coordonn√©e donn√©e.
     *
     *      - SaveAction([...])         Permet de storer 100 octets dans le serveur. Lors
     *                                  de votre reconnection, ces donn√©es vous seront
     *                                  redonn√©es par le serveur.
     *
     *      - SwitchWeaponAction(id)    Permet de changer d'arme. Par d√©faut, votre bot
     *                                  n'est pas arm√©, voici vos choix:
     *                                      Weapon.None
     *                                      Weapon.Gun
     *                                      Weapon.Blade
     *
     *      - BladeRotateAction(rad)    Si vous avez la lame comme arme, vous pouver mettre votre arme
     *                                  √† la rotation donn√©e en radian.
     */
    on_tick(game_state: GameState): Action[] {
        console.log("üöÄ ~ MyBot ~ on_tick ~ game_state:", game_state);
        console.log(`Current tick: ${game_state.tick}`);

        return [
            new MoveAction({ x: 10.0, y: 11.34 }),
            new ShootAction({ x: 11.2222, y: 13.547 }),
            new SwitchWeaponAction(Weapons.Blade),
            new SaveAction(new TextEncoder().encode("Hello, world!")),
        ];
    }

    /**
     * (fr) Cette m√©thode est appel√©e une seule fois au d√©but de la partie. Vous pouvez y d√©finir des
     *      actions √† effectuer au d√©but de la partie.
     */
    on_start(state: MapState) {
        console.log("üöÄ ~ MyBot ~ on_start ~ state:", state);
        this.state = state;
    }

    /**
     * (fr) Cette m√©thode est appel√©e une seule fois √† la fin de la partie. Vous pouvez y d√©finir des actions
     *      √† effectuer √† la fin de la partie.
     */
    on_end() {
        console.log("üöÄ ~ MyBot ~ on_end ~ state:", this.state);
        this.state = null;
    }
}

export { MyBot };
