import type { Action } from "./actions";
import { MoveAction, SaveAction, ShootAction, SwitchWeaponAction } from "./actions";
import type { Coin, GameState, MapState, Point } from "./types";
import Weapons from "./weapons";

/**
 * (fr) Cette classe reprÃ©sente votre bot. Vous pouvez y dÃ©finir des attributs et des mÃ©thodes qui
 *      seront conservÃ©es entre chaque appel de la mÃ©thode `on_tick`.
 */
export class MyBot {
    private name = "Isabella";
    private state: null | MapState = null;

    constructor() {
        this.name = "Isabella";
    }

    /**
     * (fr) Cette mÃ©thode est appelÃ©e Ã  chaque tick de jeu. Vous pouvez y dÃ©finir
     *      le comportement de voter bot. Elle doit retourner une liste d'actions
     *      qui sera exÃ©cutÃ©e par le serveur.
     *
     *      Liste des actions possibles:
     *      - MoveAction({x, y})        Permet de diriger son bot, il ira a vitesse
     *                                  constante jusqu'Ã  ce point.
     *
     *      - ShootAction({x, y})       Si vous avez le canon comme arme, cela va tirer
     *                                  Ã  la coordonnÃ©e donnÃ©e.
     *
     *      - SaveAction([...])         Permet de storer 100 octets dans le serveur. Lors
     *                                  de votre reconnection, ces donnÃ©es vous seront
     *                                  redonnÃ©es par le serveur.
     *
     *      - SwitchWeaponAction(id)    Permet de changer d'arme. Par dÃ©faut, votre bot
     *                                  n'est pas armÃ©, voici vos choix:
     *                                      Weapon.None
     *                                      Weapon.Gun
     *                                      Weapon.Blade
     *
     *      - BladeRotateAction(rad)    Si vous avez la lame comme arme, vous pouver mettre votre arme
     *                                  Ã  la rotation donnÃ©e en radian.
     */
    on_tick(gameState: GameState): Action[] {
        console.log("ðŸš€ ~ MyBot ~ on_tick ~ game_state:", gameState);
        console.log(`Current tick: ${gameState.tick}`);

        const isabella = gameState.players.find((p) => p.name === this.name);
        if (!isabella) {
            console.error("NO PLAYER???!?!");
            return [];
        }

        let closestCoinDistance!: number;
        let closestCoin!: Coin;
        for (const coin of gameState.coins) {
            const dist = distance(coin.pos, isabella.pos);
            if (!closestCoin || dist < closestCoinDistance) {
                closestCoinDistance = dist;
                closestCoin = coin;
            }
        }

        return [
            new MoveAction(closestCoin.pos),
            new ShootAction({ x: 11.2222, y: 13.547 }),
            new SwitchWeaponAction(Weapons.Blade),
            new SaveAction(new TextEncoder().encode("Hello, world!")),
        ];
    }

    /**
     * (fr) Cette mÃ©thode est appelÃ©e une seule fois au dÃ©but de la partie. Vous pouvez y dÃ©finir des
     *      actions Ã  effectuer au dÃ©but de la partie.
     */
    on_start(state: MapState) {
        console.log("ðŸš€ ~ MyBot ~ on_start ~ state:", state);
        this.state = state;
        state.map;
    }

    /**
     * (fr) Cette mÃ©thode est appelÃ©e une seule fois Ã  la fin de la partie. Vous pouvez y dÃ©finir des actions
     *      Ã  effectuer Ã  la fin de la partie.
     */
    on_end() {
        console.log("ðŸš€ ~ MyBot ~ on_end ~ state:", this.state);
        this.state = null;
    }
}

function distance(p1: Point, p2: Point) {
    return Math.abs(p1.x - p2.x) + Math.abs(p1.y - p2.y);
}
